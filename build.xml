<?xml version="1.0" encoding="utf-8"?>
<project>

	<property name="commonDir" value="../whitehole-common" />

	<macrodef name="rhinoscript">
		<attribute name="require-path" default="." />
		<attribute name="require-verbose" default="false" />
		<attribute name="src" default="" />
		<text name="text" optional="yes" />
		<sequential>
			<script language="javascript">
				<![CDATA[
// Rhino's load() is not available when running Ant in Eclipse?
function load(path) {
	return eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(path)));
}

var define, require;
(function (AMD) {
	define = AMD.define;
	require = AMD.require;
} (load("build-aux/org/whitehole/infra/AMD.js")));
// Configure require:
require.path = "@{require-path}";
require.verbose = @{require-verbose};

if ("@{src}" !== "")
	load("@{src}");

@{text}
]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="generate">
		<attribute name="generator" />
		<attribute name="input" default="" />
		<attribute name="output" />
		<sequential>
			<rhinoscript require-path="build-aux">
				<![CDATA[
require(['@{generator}'], 
	function (g) {
		'use strict';
		if ("@{input}" !== "")
			g("@{input}", "@{output}");
		else
			g("@{output}");
});
]]>
			</rhinoscript>
		</sequential>
	</macrodef>

	<target name="build-infra.types-sources">
		<generate generator="org/whitehole/infra/types/generateBinaryWidth" output="src/org/whitehole/infra/types/BinaryWidth.java" />
		<generate generator="org/whitehole/infra/types/generateByteArrayN" output="src/org/whitehole/infra/types" />
		<generate generator="org/whitehole/infra/types/generateSIntN" output="src/org/whitehole/infra/types" />
		<generate generator="org/whitehole/infra/types/generateLittleEndianReader" output="src/org/whitehole/infra/types/LittleEndianReader.java" />
	</target>

	<target name="build-binary-sources">
		<generate generator="org/whitehole/binary/generateSchemeModel" input="${commonDir}/resources/org/whitehole/binary/pe/pe.json" output="org.whitehole.binary.pe" />
	</target>

	<target name="build-assembly.ia32_x64-sources">
		<generate generator="org/whitehole/assembly/ia32_x64/generateHTML" input="${commonDir}/resources/org/whitehole/assembly/ia32_x64/opcodeMaps.json" output="build-aux/org/whitehole/assembly/ia32_x64/opcodeMaps.html" />
		<generate generator="org/whitehole/assembly/ia32_x64/generateMnemonic" input="${commonDir}/resources/org/whitehole/assembly/ia32_x64/opcodeMaps.json" output="src/org/whitehole/assembly/ia32_x64/Mnemonic.java" />
		<generate generator="org/whitehole/assembly/ia32_x64/generateRegisterName" input="${commonDir}/resources/org/whitehole/assembly/ia32_x64/registerMaps.json" output="src/org/whitehole/assembly/ia32_x64/RegisterName.java" />
	</target>

	<target name="build-sources" depends="build-infra.types-sources, build-binary-sources, build-assembly.ia32_x64-sources" />

</project>
